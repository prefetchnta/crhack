======================
| GCC 链接的相关说明 |
======================
(★) GCC 链接的时候，库文件要放到 O 文件的后面
     另外工具 ar 不能把库文件合并起来，所以外加的静态库要另外手工添加
     或 -l 搜索之（必须 lib 开头 .a 结束）

=======================
| 建立 DLL 的若干说明 |
=======================
(★) BCC32 使用多线程静态 CRT 库，不指定自定义入口点，由于库的局限
     file_buf_tell()/file_buf_seek() 函数只支持32位大小的文件（2GB）
(★) VC7X 为了使 file_buf_tell()/file_buf_seek() 函数支持 4GB 以上文件
     只能使用 /MT 建立，即多线程静态 CRT 库，所以不能指定自定义入口点
     但是对于完全不使用到 C 库相关的动态库，可以指定自定义入口点
(★) VC80+ 完全使用多线程 DLL CRT 库，自定义入口点，DLL 比较干净
(★) 此条废弃，底层已经基本封装完毕，为方便编译统一去掉了自定义入口点

========================
| 压缩解压缩的若干说明 |
========================
(★) ARITH 不能正确处理小于等于2字节的非0数据
(★) JCALG1 如果传入不能压缩的数据会返回0失败（1个字节例外？）
(★) LZARI & LZHUF 传入参数 dstlen 必须是解压缩后的正确大小，否则可能会出错

======================
| 头文件包含顺序说明 |
======================
(★) #include ""（自定义头文件）必须在 #include <>（系统头文件）之前
     这样配置的宏就可以起作用，否则会出现意想不到的问题

====================
| 颜色值的相关说明 |
====================
(★) 所有颜色相关的整数都假设为 LE 模式来计算
(★) 颜色值必须由 CR_VRGBA*()/CR_CRGBA*() 合成 LE 格式的整数
     （即 cl32_t 类型由 CR_VRGBA32()/CR_CRGBA32() 合成）
(★) 对于 CRHACK/BLIT 提供的 cpix_t 颜色类型，必须由 CR_COLOR*() 函数合成
     插值参数放在最高地址处，处理时应该注意，其24/32位格式与 cl32_t 相同

====================
| 驱动函数库的说明 |
====================
(★) 由于 KeilC51 (BL51) 会把多余没用的函数使用的 DATA RAM 拿来当总内存
     计算，所以，有很多没调用函数的时候链接老是会报内存溢出错误
(★) 因此，必须在所有驱动函数处加上过滤宏选项，对于总线型驱动使用 #ifdef，
     宏名直接使用函数名，而对于器件型驱动使用 #ifndef，宏名为两个下划线加
     no_ 加函数名称

====================
| 写跨平台驱动规则 |
====================
(★) 永远不要确定长度地址等的数据类型，只能让目标平台来配置它的类型
(★) 因此，必须对地址和长度做严格的边界检查，以防数值溢出边界

====================
| ARM 架构版本说明 |
====================
(★) v3, v3M ---------------------- _CR_ARM_V16_ = 0, _CR_ARM_V32_ = 3
(★) v4, v4xM --------------------- _CR_ARM_V16_ = 0, _CR_ARM_V32_ = 4
(★) v4T, v4TxM ------------------- _CR_ARM_V16_ = 1, _CR_ARM_V32_ = 4
(★) v5T, v5TE, v5TEJ ------------- _CR_ARM_V16_ = 2, _CR_ARM_V32_ = 5
(★) v6, v6K, v6Z ----------------- _CR_ARM_V16_ = 3, _CR_ARM_V32_ = 6
(★) v6T2 ------------------------- _CR_ARM_V16_ = 4, _CR_ARM_V32_ = 6
(★) v6-M, v6S-M ------------------ _CR_ARM_V16_ = 3, _CR_ARM_V32_ = 0
(★) v7-A, v7-R ------------------- _CR_ARM_V16_ = 4, _CR_ARM_V32_ = 7
(★) v7-M, v7E-M ------------------ _CR_ARM_V16_ = 4, _CR_ARM_V32_ = 0
