             C/C++ 编译器选项


               -优化-

/O1 最大优化(优选空间)                  /O2 最大优化(优选速度)
/Ob<n> 内联扩展(默认 n=0)               /Od 禁用优化(默认)
/Og 启用全局优化                        /Oi[-] 启用内部函数
/Os 优选代码空间                        /Ot 优选代码速度
/Ox 优化(优选速度)                      

               -代码生成-

/Gu[-] 确保 distinct 函数具有非重复地址 /Gw[-] 分隔链接器的全局变量
/GF 启用只读字符串池                    /Gm[-] 启用最小重新生成
/Gy[-] 分隔链接器函数                   /GS[-] 启用安全检查
/GR[-] 启用 C++ RTTI                    /GX[-] 启用 C++ EH (与 /EHsc 相同)
/guard:cf[-] 启用 CFG (控制流保护)      /guard:ehcont[-] 启用 EH 继续元数据(CET)
/EHs 启用 C++ EH (没有 SEH 异常)        /EHa 启用 C++ EH (w/ SEH 异常)
/EHc 外部 "C" 默认为 nothrow            /EHr 始终生成 noexcept 运行时终止检查
/fp:<contract|except[-]|fast|precise|strict> 选择浮点模型:
    协定 - 生成代码时考虑浮点收缩         except[-] - 在生成代码时考虑浮点异常
  fast - "fast" 浮点模型；结果可预测性比较低
  precise - "precise" 浮点模型；结果可预测
  strict - "strict" 浮点模型(意味着 /fp:except)
即使使用 /fp:except，/Qfast_transcendentals 也生成内联内部 FP
/Qspectre[-] 对 CVE 2017-5753 启用缓解措施
/Qpar[-] 启用并行代码生成               
/Qpar-report:1 自动并行化诊断；指示已并行化循环
/Qpar-report:2 自动并行化诊断；指示未并行化循环
/Qvec-report:1 自动向量化诊断；指示已向量化循环
/Qvec-report:2 自动向量化诊断；指示未向量化循环
/GL[-] 启用链接时代码生成               /volatile:<iso|ms> 选择可变模型:
    iso - Acquire/release 语义对可变访问不一定有效
    ms - Acquire/release 语义对可变访问一定有效
/guard:signret[-] 启用已签名的返回指令生成
/arch:armv8.<0|8> Armv8.x-A 的最低 CPU 扩展要求

               -输出文件-

/Fa[file] 命名程序集列表文件            /FA[scu] 配置程序集列表
/Fd[file] 命名 .PDB 文件                /Fe<file> 命名可执行文件
/Fm[file] 命名映射文件                  /Fo<file> 命名对象文件
/Fp<file> 命名预编译头文件              /Fr[file] 命名源浏览器文件
/FR[file] 命名扩展 .SBR 文件            /Fi[file] 命名预处理的文件
/Fd: <file> 命名 .PDB 文件              /Fe: <file> 命名可执行文件
/Fm: <file> 命名映射文件                /Fo: <file> 命名对象文件
/Fp: <file> 命名 .PCH 文件              /FR: <file> 命名扩展 .SBR 文件
/Fi: <file> 命名预处理的文件            /Ft<dir> 为 #import 生成的头文件的地址

               -预处理器-

/AI<dir> 添加到程序集搜索路径           /FU<file> 强制使用程序集/模块 
/C 不抽出注释                           /D<name>{=|#}<text> 定义宏
/E 预处理到 stdout                      /EP 预处理到 stdout，无行号
/P 预处理到文件                         /Fx 将插入的代码合并到文件中
/FI<file> 命名强制包含文件              /U<name> 移除预定义的宏
/u 移除所有预定义的宏                   /I<dir> 添加到包含搜索路径
/X 忽略“标准位置”                     /PH 在预处理时生成 #pragma file_hash
/PD 打印所有宏定义                      

                -语言-

/std:<c++14|c++17|c++20|c++latest> C++ 标准版
    c++14 - ISO/IEC 14882:2014 (默认值)
    c++17 - ISO/IEC 14882:2017
    c++20 - ISO/IEC 14882:2020
    c++latest - 最新草案标准(功能集可能更改)
/permissive[-] 使某些非符合代码可编译(功能集可更改)(默认开启)
/Ze 启用扩展(默认)                      /Za 禁用扩展
/ZW 启用 WinRT 语言扩展                 /Zs 只进行语法检查
/Zc:arg1[,arg2] C++ 语言合规性，这里的参数可以是:
 forScope[-]      对范围规则强制使用标准 C++
 wchar_t[-]      wchar_t 是本机类型，不是 typedef
  auto[-]               对 auto 强制使用新的标准 C++ 含义
  trigraphs[-]          启用三元祖(默认关闭)
 rvalueCast[-]     强制实施标准 C++ 显式类型转换规则
 strictStrings[-]   禁用从字符串文本到 [char|wchar_t]*
                        的转换(默认关闭)
 implicitNoexcept[-]  在必需的函数上启用隐式 noexcept
threadSafeInit[-]   启用线程安全的本地静态初始化
  inline[-]             如果是 COMDAT，则删除未引用的函数或数据
                        或仅使用内部链接(默认关闭)
  sizedDealloc[-]       启用 C++14 全局大小解除分配
                        函数(默认开启)
  throwingNew[-]        假设运算符 new 在故障时引发(默认关闭)
  referenceBinding[-]   临时引用不会绑定到非常数
                        lvalue 引用(默认关闭)
  twoPhase-             禁用两阶段名称查找
  ternary[-]            对条件运算符强制使用 C++11 规则(默认关闭)
  noexceptTypes[-]      强制执行 C++17 noexcept 规则(在 C++17 或更高版本中默认开启)
  alignedNew[-]         对动态分配的对象启用 C++17 对齐方式(默认开启)
  hiddenFriend[-]       强制实施标准 C++ 隐藏好友规则(/permissive- 所隐含)
  externC[-]            强制实施外部 "C" 函数的标准 C++ 规则(/permissive- 所隐含)
  lambda[-]             使用更新的 lambda 处理器提供更好的 lambda 支持(默认为关闭)
  tlsGuards[-]          生成 TLS 变量初始化的运行时检查(默认情况下启用)
  zeroSizeArrayNew[-]   针对大小为零的对象数组的调用对象 new/delete (默认启用)
  static_assert[-] 严格处理 "static_assert" (由 /permissive- 隐含)
  gotoScope[-]          无法跳过变量的初始化(由 /permissive- 暗示)
  __STDC__在 C 中将 __STDC__ 定义为 1   
  enumTypes[-]          启用标准 C++ 基础枚举类型(默认情况下关闭)
/await 启用可恢复函数扩展
/await:strict 启用使用早期语言版本的标准 C++20 协同例程支持
/constexpr:depth<N>     constexpr 评估的递归深度限制(默认值: 512)
/constexpr:backtrace<N> 在诊断中显示 N constexpr 评估(默认值: 10)
/constexpr:steps<N>     在 N 个步骤后终止 constexpr 评估(默认值: 100000)
/Zi 启用调试信息                        /Z7 启用旧式调试信息
/Zo[-] 为优化的代码生成更丰富的调试信息(默认开启)
/ZH:[MD5|SHA1|SHA_256] 哈希算法，用于在调试信息中计算文件校验和(默认值: SHA_256)
/Zp[n] 在 n 字节边界上包装结构          /Zl 省略 .OBJ 中的默认库名
/vd{0|1|2} 禁用/启用 vtordisp           /vm<x> 指向成员的指针类型
/std:<c11|c17> C 标准版本
    c11 - ISO/IEC 9899:2011
    c17 - ISO/IEC 9899:2018
/Zc:arm64-aliased-neon-types[-] 确定霓虹灯矢量类型是否为
                                互异，还是设置为了常见类型
                                (默认打开)

               - 杂项 -

@<file> 选项响应文件                    /?, /help 打印此帮助消息
/bigobj 生成扩展的对象格式              /c 只编译，不链接
/errorReport:option 已弃用。请将内部编译器错误报告给 Microsoft
    none - 不发送报告                       prompt - 提示立即发送报告
    queue - 在下一次管理员登录时，提示发送报告(默认)
    send - 自动发送报告                 /FC 诊断中使用完整路径名
/H<num> 最大外部名称长度                /J 默认 char 类型是 unsigned
/MP[n] 最多使用“n”个进程进行编译      /nologo 取消显示版权信息
/showIncludes 显示包含文件名            /Tc<source file> 将文件编译为 .c
/Tp<source file> 将文件编译为 .cpp      /TC 将所有文件编译为 .c
/TP 将所有文件编译为 .cpp               /V<string> 设置版本字符串
/Yc[file] 创建 .PCH 文件                /Yd 将调试信息放在每个 .OBJ 中
/Yl[sym] 为调试库插入 .PCH 引用         /Yu[file] 使用 .PCH 文件
/Y- 禁用所有 PCH 选项                   /Zm<n> 最大内存分配(默认值的百分比)
/FS 强制使用 MSPDBSRV.EXE               
/source-charset:<iana-name>|.nnnn 集源字符集
/execution-charset:<iana-name>|.nnnn 集执行字符集
/utf-8 集源和到 UTF-8 的执行字符集      
/validate-charset[-] 验证 UTF-8 文件是否只有合法字符
/fastfail[-] 启用 fast-fail 模式        /JMC[-] 启用本机“仅我的代码”
/presetPadding[-] 将基于堆栈的类类型的填充初始化为零
/volatileMetadata[-] 对易失存储器访问生成元数据
/sourcelink [file] 包含源链接信息的文件 /arm64EC 生成与 ARM64EC ABI 兼容的代码

                -链接-

/LD 创建 .DLL                           /LDd 创建 .DLL 调试库
/LN 创建 .netmodule                     /F<num> 设置堆栈大小
/link [链接器选项和库]                  


                              -诊断-

/diagnostics:<args,...> 控制诊断消息的格式:
             传统型 - 保留之前的格式
             列[-] - 打印列信息
             脱字号[-] - 打印列和源的指示行
/Wall 启用所有警告                      /w   禁用所有警告
/W<n> 设置警告等级(默认 n=1)            
/Wv:xx[.yy[.zzzzz]] 禁用在 xx.yy.zzzzz 版本后引入的警告功能
/WX 将警告视为错误                      /WL 启用单行诊断
/wd<n> 禁用警告 n                       /we<n> 将警告 n 视为错误
/wo<n> 发出一次警告 n                   /w<l><n> 为 n 设置警告等级 1-4
/external:I <path>      - 外部标头的位置
/external:env:<var>    - 外部标头位置的环境变量
/external:anglebrackets - 将所有通过 <> 包含的标头视为外部
/external:W<n>          - 外部标头的警告等级
/external:templates[-]  - 跨模板实例化链评估警告级别
/sdl 支持其他安全功能和警告             
/选项: 严格无法识别的编译器选项是一个错误

