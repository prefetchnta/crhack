                         C/C++ 编译器选项


                              -优化-

/O1 最小化空间                          /O2 最大化速度
/Ob<n> 内联扩展(默认 n=0)               /Od 禁用优化(默认)
/Og 启用全局优化                        /Oi[-] 启用内部函数
/Os 优选代码空间                        /Ot 优选代码速度
/Ox 最大化优化                          

                             -代码生成-

/GF 启用只读字符串池                    /Gm[-] 启用最小重新生成
/Gy[-] 分隔链接器函数                   /GS[-] 启用安全检查
/GR[-] 启用 C++ RTTI                    /GX[-] 启用 C++ EH (与 /EHsc 相同)
/EHs 启用 C++ EH (没有 SEH 异常)        /EHa 启用 C++ EH (w/ SEH 异常)
/EHc 外部“C”默认为 nothrow            
/fp:<except[-]|fast|precise|strict> 选择浮点模式:
    except[-] - 在生成代码时考虑浮点异常
    fast -“fast”浮点模式；结果可预测性比较低
    precise -“precise”浮点模式；结果可预测
    strict -“strict” 浮点模式(意味着 /fp:except)
即使使用 /fp:except，/Qfast_transcendentals 也生成内联内部 FP
/GL[-] 启用链接时代码生成               /QMmips1 MIPS I ISA
/QMmips2 MIPS II ISA (默认)             /QMmips3 MIPS III ISA
/QMmips4 MIPS IV ISA                    /QMmips5 MIPS V ISA
/QMmips16 MIPS 16 ASE                   /QMmips32 MIPS 32 ISA
/QMmips64 MIPS 64 ISA                   /QMn32[-] 针对 MIPS n32 模式生成代码
/QMR3900 针对 r3900 进行优化            /QMR4100 针对 r4100 进行优化
/QMR4200 针对 r4200 进行优化            /QMR4300 针对 r4300 进行优化
/QMR5400 针对 r5400 进行优化            /QMVIPER 针对 Viper 进行优化
/QMRFWCE 泛型 WinCE -QMFPE- MIPS        /QMRWCE 泛型 WinCE MIPS (默认)
/QMFPE[-] 使用浮点模拟                  /QMase3D 使用 MIPS-3D ASE

                              -输出文件-

/Fa[file] 命名程序集列表文件            /FA[scu] 配置程序集列表
/Fd[file] 命名 .PDB 文件                /Fe<file> 命名可执行文件
/Fm[file] 命名映射文件                  /Fo<file> 命名对象文件
/Fp<file> 命名预编译头文件              /Fr[file] 命名源浏览器文件
/FR[file] 命名扩展 .SBR 文件            

                              -预处理器-

/AI<dir> 添加到程序集搜索路径           /FU<file> 强制使用程序集/模块 
/C 不抽出注释                           /D<name>{=|#}<text> 定义宏
/E 将预处理定向到 stdout                /EP 预处理到标准输出，没有 #line
/P 预处理到文件                         /Fx 将插入的代码合并到文件中
/FI<file> 命名强制包含文件              /U<name> 移除预定义的宏
/u 移除所有预定义的宏                   /I<dir> 添加到包含搜索路径
/X 忽略“标准位置”                     

                                -语言-

/Zi 启用调试信息                        /Z7 启用旧式调试信息
/Zp[n] 在 n 字节边界上包装结构          /Za 禁用扩展
/Ze 启用扩展(默认)                      /Zl 忽略 .OBJ 中的默认库名
/Zg 生成函数原型                        /Zs 只进行语法检查
/vd{0|1|2} 禁用/启用 vtordisp           /vm<x> 指向成员的指针类型
/Zc:arg1[,arg2] C++ 语言合规性，这里的参数可以是:
    forScope[-] - 对范围规则强制使用标准 C++
    wchar_t[-] - wchar_t 是本机类型，不是 typedef

                              - 杂项 -

@<file> 选项响应文件                    /?, /help 打印此帮助消息
/bigobj 生成扩展的对象格式              /c 只编译，不链接
/errorReport:option 将内部编译器错误报告给 Microsoft
    none - 不发送报告                       prompt - 提示立即发送报告
    queue - 在下一次管理员登录时，提示发送报告(默认)
    send - 自动发送报告                 /FC 诊断中使用完整路径名
/H<num> 最大外部名称长度                /J 默认 char 类型是 unsigned
/MP[n] 最多使用“n”个进程进行编译      /nologo 取消显示版权消息
/showIncludes 显示包含文件名            /Tc<source file> 将文件编译为 .c
/Tp<source file> 将文件编译为 .cpp      /TC 将所有文件编译为 .c
/TP 将所有文件编译为 .cpp               /V<string> 设置版本字符串
/w 禁用所有警告                         /wd<n> 禁用警告 n
/we<n> 将警告 n 视为错误                /wo<n> 发出一次警告 n
/w<l><n> 为 n 设置警告等级 1-4          /W<n> 设置警告等级(默认 n=1)
/Wall 启用所有警告                      /WL 启用单行诊断
/WX 将警告视为错误                      /Yc[file] 创建 .PCH 文件
/Yd 将调试信息放在每个 .OBJ 中          /Yl[sym] 为调试库插入 .PCH 引用
/Yu[file] 使用 .PCH 文件                /Y- 禁用所有 PCH 选项
/Zm<n> 最大内存分配(默认为 %)           

                                -链接-

/LD 创建 .DLL                           /LDd 创建 .DLL 调试库
/LN 创建 .netmodule                     /F<num> 设置堆栈大小
/link [链接器选项和库]                  /MD 与 MSVCRT.LIB 链接
/MT 与 LIBCMT.LIB 链接                  /MDd 与 MSVCRTd.LIB 调试库链接
/MTd 与 LIBCMTd.LIB 调试库链接          

                         -代码分析-

/analyze[:WX-] 启用代码分析             
    WX- - 即使调用了 /WX，也不应将代码分析警告视为错误

